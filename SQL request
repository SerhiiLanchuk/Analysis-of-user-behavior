-- Step 1: Account metrics (basic metrics by grouping dimensions)
with account_metrics AS (
  SELECT
         date,                   -- account creation date
         sp.country,
         a.send_interval,
         a.is_verified,
         a.is_unsubscribed,
         COUNT(DISTINCT a.id) AS account_cnt  -- number of created accounts
  FROM `DA.account` a
  JOIN `DA.account_session` acs ON acs.account_id = a.id
  JOIN `DA.session_params` sp ON sp.ga_session_id = acs.ga_session_id
  JOIN `DA.session` s ON s.ga_session_id = acs.ga_session_id
  GROUP BY date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),


-- Step 2: Email metrics (basic metrics by grouping dimensions)
email_metrics AS (
  SELECT
         DATE_ADD(date, INTERVAL es.sent_date DAY) AS date, -- email sent date = account creation date + sent offset
         sp.country,
         a.send_interval,
         a.is_verified,
         a.is_unsubscribed,
         COUNT(DISTINCT es.id_message) AS sent_msg,   -- emails sent
         COUNT(DISTINCT eo.id_message) AS open_msg,   -- emails opened
         COUNT(DISTINCT ev.id_message) AS visit_msg   -- email link visits
  FROM `DA.account_session` acs
  JOIN `DA.session` s ON s.ga_session_id = acs.ga_session_id
  JOIN `DA.account` a ON a.id = acs.account_id
  JOIN `DA.session_params` sp ON sp.ga_session_id = acs.ga_session_id
  JOIN `DA.email_sent` es ON es.id_account = acs.account_id
  LEFT JOIN `DA.email_open` eo ON eo.id_message = es.id_message
  LEFT JOIN `DA.email_visit` ev ON ev.id_message = es.id_message
  GROUP BY date, sp.country, a.send_interval, a.is_verified, a.is_unsubscribed
),


-- Step 3: Union both account and email metrics into one dataset
union_all AS (
  SELECT
         date,
         country,
         send_interval,
         is_verified,
         is_unsubscribed,
         account_cnt,
         0 AS sent_msg,
         0 AS open_msg,
         0 AS visit_msg
  FROM account_metrics
  UNION ALL
  SELECT
         date,
         country,
         send_interval,
         is_verified,
         is_unsubscribed,
         0 AS account_cnt,
         sent_msg,
         open_msg,
         visit_msg
  FROM email_metrics
),


-- Step 4: Aggregate totals by grouping fields (dimensions)
sum_all AS (
  SELECT
         date,
         country,
         send_interval,
         is_verified,
         is_unsubscribed,
         SUM(account_cnt) AS account_cnt,
         SUM(sent_msg) AS sent_msg,
         SUM(open_msg) AS open_msg,
         SUM(visit_msg) AS visit_msg
  FROM union_all
  GROUP BY date, country, send_interval, is_verified, is_unsubscribed
),


-- Step 5: Country-level totals for accounts
acc_totals AS (
  SELECT
         country,
         SUM(account_cnt) AS total_country_account_cnt
  FROM sum_all
  GROUP BY country
),


-- Step 6: Country-level totals for emails
email_totals AS (
  SELECT
         country,
         SUM(sent_msg) AS total_country_sent_cnt
  FROM sum_all
  GROUP BY country
),


-- Step 7: Country rankings
acc_rank AS (
  SELECT
         country,
         total_country_account_cnt,
         DENSE_RANK() OVER (ORDER BY total_country_account_cnt DESC) AS rank_total_country_account_cnt
  FROM acc_totals
),
email_rank AS (
  SELECT
         country,
         total_country_sent_cnt,
         DENSE_RANK() OVER (ORDER BY total_country_sent_cnt DESC) AS rank_total_country_sent_cnt
  FROM email_totals
)


-- Step 8: Final output
SELECT
       sa.*,
       act.total_country_account_cnt,
       et.total_country_sent_cnt,
       ar.rank_total_country_account_cnt,
       er.rank_total_country_sent_cnt
FROM sum_all sa
JOIN acc_rank ar ON sa.country = ar.country
JOIN email_rank er ON sa.country = er.country
JOIN acc_totals act ON sa.country = act.country
JOIN email_totals et ON sa.country = et.country
WHERE ar.rank_total_country_account_cnt <= 10
   OR er.rank_total_country_sent_cnt <= 10;
